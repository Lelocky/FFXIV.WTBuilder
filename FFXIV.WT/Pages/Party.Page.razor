@page "/Party"
@page "/Party/{Key:guid}"
@inject WTService WTService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable
<div class="content">
    <div class="container">
        <div class="row">

            @if (Key == Guid.Empty)
            {
                <button @onclick="CreateParty">Create new Party</button>

            }
            else
            {
                <div class="col-12">
                    <div class="alert alert-primary" role="alert">
                        <h4 class="alert-heading">You created a party!</h4>
                        <p>You can share the link below with your friends. This will allow them to add duties to the list.</p>
                        <hr />
                        <p class="mb-0 user-select-all">https://host/party/@Key</p>
                    </div>
                </div>
            }
        </div>


        <div class="row">

            @if (Party != null)
            {
                <div class="col-sm">
                    <h3>Duty list <span class="badge badge-secondary">@Party.SelectedDuties.Count</span></h3>
                </div>
                <div class="col-sm">
                    <button class="btn btn-primary" @onclick="AddDuties">Add Duties</button>
                </div>
            }
            else
            {
                <div class="col-sm">
                    <h3>Duty list</h3>
                </div>
            }

        </div>
        @if (Party != null)
        {
            <div class="row">
                <div class="col-12">
                    @if (Party.SelectedDuties.Count > 0)
                    {
                        <div class="list-group">

                            @foreach (var selectedDuty in Party.SelectedDuties.OrderByDescending(x => x.Value))
                            {
                                <button type="button" @onclick="(() => Remove(selectedDuty.Key))" class="list-group-item list-group-item-action">@AllDuties[selectedDuty.Key].DutyName <span class="badge badge-primary">@selectedDuty.Value</span></button>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="col-sm">
                            <p>None added</p>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    public Guid Key { get; set; }
    private Party Party { get; set; }
    private Dictionary<Guid, Duty> AllDuties { get; set; }

    protected override void OnInitialized()
    {
        WTService.OnChange += OnStateChange;

        if (Key != Guid.Empty)
        {
            Party = WTService.GetParty(Key);
            AllDuties = WTService.GetDuties();
            StateHasChanged();
        }
    }

    public void CreateParty()
    {
        var partyKey = WTService.AddParty();
        Key = partyKey;
        Party = WTService.GetParty(Key);
        AllDuties = WTService.GetDuties();
        StateHasChanged();

    }

    public void AddDuties()
    {
        NavigationManager.NavigateTo($"/Party/add/{Key}");
    }

    public async Task Remove(Guid dutyKey)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove it from the duty list?");

        if (confirmed)
        {
            WTService.RemoveDutyFromParty(Key, dutyKey);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        try
        {
            WTService.OnChange -= OnStateChange;
        }
        catch (Exception)
        {

            //Failed to call StateHasChanged
        }

    }

    private async void OnStateChange()
    {
        await InvokeAsync(() => StateHasChanged());
    }
}
