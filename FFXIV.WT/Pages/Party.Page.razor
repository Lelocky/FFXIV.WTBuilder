@page "/Party"
@page "/Party/{Key:guid}"
@inject WTService WTService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable

<div class="container">
    <div class="row">
        <div class="col-8 text-center">
            <h2 class="display-6"><i class="bi bi-book"></i> Duties</h2>
            @if (Party != null)
            {
                <div class="row">
                    <div class="col-12 text-start">
                        @if (Party.SelectedDuties.Count > 0)
                        {
                            <div class="list-group">

                                @foreach (var selectedDuty in Party.SelectedDuties.OrderByDescending(x => x.Value))
                                {
                                    <button type="button" @onclick="(() => Remove(selectedDuty.Key))" class="list-group-item list-group-item-action">@AllDuties[selectedDuty.Key].DutyName <span class="badge badge-primary">@selectedDuty.Value</span></button>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="col-12 text-center">
                                <div class="no-duties-container">
                                    <i class="bi bi-journal"></i>
                                    <p class="lead">
                                        There are no duties in this party
                                    </p>

                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="col-4 text-center stick-top">
            @if (Party != null)
            {
                <h3 class="display-6">Step <i class="bi bi-1-circle"></i></h3>
                <div class="card step-card">
                    <div class="card-body">
                        <h5 class="card-title">Party invite</h5>
                        <p class="card-text">Share the link below with your friends.</p>
                        <p><small>@GetUrl</small></p>
                        <button class="btn btn-primary" @onclick="CopyUrlToClipboard"><i class="bi bi-copy"></i> Copy URL</button>
                    </div>
                </div>
                <h2><i class="bi bi-arrow-down"></i></h2>
                <h3 class="display-6">Step <i class="bi bi-2-circle"></i></h3>
                <div class="card step-card">
                    <div class="card-body">
                        <h5 class="card-title">Add duties</h5>
                        <p class="card-text">Open your book and add your duties to this party.</p>
                        <button class="btn btn-primary" @onclick="AddDuties"><i class="bi bi-journal-plus"></i> Add</button>
                    </div>
                </div>
                <h2><i class="bi bi-arrow-down"></i></h2>
                <h3 class="display-6">Step <i class="bi bi-3-circle"></i></h3>
                <div class="card step-card">
                    <div class="card-body">
                        <h5 class="card-title">Fight!</h5>
                        <p class="card-text">Boss killed? Click on the duty to remove it from the list.</p>
                    </div>
                </div>
            }
            else
            {
                <h3 class="display-6">Step <i class="bi bi-1-circle"></i></h3>
                <div class="card step-card">
                    <div class="card-body">
                        <h5 class="card-title">Create a party</h5>
                        <p class="card-text">Can't add duties without a party.</p>
                        <button class="btn btn-primary" @onclick="CreateParty"><i class="bi bi-plus-circle"></i> Create</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Guid Key { get; set; }
    private Party Party { get; set; }
    private Dictionary<Guid, Duty> AllDuties { get; set; }

    protected override void OnInitialized()
    {
        WTService.OnChange += OnStateChange;

        if (Key != Guid.Empty)
        {
            Party = WTService.GetParty(Key);
            AllDuties = WTService.GetDuties();
            StateHasChanged();
        }
    }

    private string GetUrl => NavigationManager.Uri;

    public async Task CopyUrlToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GetUrl);
    }

    public void CreateParty()
    {
        var partyKey = WTService.AddParty();
        Key = partyKey;
        Party = WTService.GetParty(Key);
        AllDuties = WTService.GetDuties();
        StateHasChanged();

    }

    public void AddDuties()
    {
        NavigationManager.NavigateTo($"/Party/{Key}/Add/");
    }

    public async Task Remove(Guid dutyKey)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove it from the duty list?");

        if (confirmed)
        {
            WTService.RemoveDutyFromParty(Key, dutyKey);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        try
        {
            WTService.OnChange -= OnStateChange;
        }
        catch (Exception)
        {

            //Failed to call StateHasChanged
        }

    }

    private async void OnStateChange()
    {
        await InvokeAsync(() => StateHasChanged());
    }


}
